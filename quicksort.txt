using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace QuicksortParallel
{
    class Program
    {
        public static void Main(string[] args)
        {
            List<string> names = new List<string>();
            using (StreamReader sr = new StreamReader("names.txt"))
            {
                while (!sr.EndOfStream)
                {
                    names.Add(sr.ReadLine());
                }
            }
            Stopwatch stopwatch = Stopwatch.StartNew();
            Sort.QuicksortParallel<String>(names, 0, names.Count - 1);
            stopwatch.Stop();
            Console.WriteLine("Elapsed time "+stopwatch.ElapsedMilliseconds);
            
            Console.ReadKey();
        }
    }


    public static class Sort
    {
        public static int Threshold = 10000;
        public static void QuicksortParallel<T>(IList<T> arr, int left, int right)
            where T : IComparable<T>
        {
            const int threshold = 2048;

            if (right <= left) return;

            if (right - left < threshold)
                Quicksort(arr, left, right);

            else
            {
                var pivot = Partition(arr, left, right);
                Parallel.Invoke(
                    () => QuicksortParallel(arr, left, pivot - 1),
                    () => QuicksortParallel(arr, pivot + 1, right));
            }
        }

        private static void Quicksort<T>(IList<T> arr, int left, int right) where T : IComparable<T>
        {
            if (right <= left) return;
            var pivot = Partition(arr, left, right);
            Quicksort(arr, left, pivot - 1);
            Quicksort(arr, pivot + 1, right);
        }

        private static void Swap<T>(IList<T> arr, int i, int j)
        {
            var tmp = arr[i];
            arr[i] = arr[j];
            arr[j] = tmp;
        }
        private static int Partition<T>(IList<T> arr, int low, int high)
            where T : IComparable<T>
        {

            var pivotPos = (high + low) / 2;
            var pivot = arr[pivotPos];

            Swap(arr, low, pivotPos);

            var left = low;
            for (var i = low + 1; i <= high; i++)
            {
                if (arr[i].CompareTo(pivot) >= 0) continue;
		left++;
                Swap(arr, i, left);
            }

            Swap(arr, low, left);

            return left;
        }
    }
}
 
